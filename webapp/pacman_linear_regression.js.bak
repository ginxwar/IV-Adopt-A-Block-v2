var pacman_timer;
var destination;
var icon_direction; // direction of the image, toward the last point of the segment (to avoid zigzag)
var movement_direction=[];  //[{up,down} , {left,right}] direction toward the nearest point, one of the points in a segment
var speed = 30; //higher = slower
var walking=false;
var segments_to_walk = []; // array of segments covered by the volunteer, but not yet by pacman
var currentSegment;
var trail;  //trail (polyline) left by pacman, that cover yellow dots



//regression
var beta1;
var beta0;


var audio_chomp = new Audio("http://danielefani.altervista.org/cleanItUp/CITRIX/pacman_chomp.wav"); 
audio_chomp.addEventListener('ended', function() 
   {
    	this.currentTime = 0;
    	if (walking) 
    		{this.play();}
   }, false);


/**
*/
function createPacman(point)
{
    audio_chomp.play();
    walking=false;
	pacman = L.marker([point.lat, point.lng],  {
	            clickable: false,
		        icon: L.divIcon({
		            className: 'pacman',
		            iconSize: [33, 30],
		            "iconAnchor": [15, 15],
		        })
		    });
	pacman.addTo(map);
	createLine(point);
}
		
		
		
function move_pacman(segment_to_cover)
{
 segments_to_walk.push(segment_to_cover);
 if (!walking)
  {walk();}
}
	    
	    
	    


function walk()
{
  audio_chomp.play();
  if (segments_to_walk.length==0)
  	{ stop_walking(); }
  else
   {
    walking=true;
    currentSegment = segments_to_walk.splice(0, 1)[0];  // pop the first segment
    linearRegression();
    //walk toward the last point of this segment
    icon_direction = getMainDirection(pacman.getLatLng(), currentSegment[currentSegment.length-1]); 
    movement_direction = getMovementDirection(pacman.getLatLng(), currentSegment[0]);  //[0] can be where I am now  
     alert(movement_direction[0]+" "+movement_direction[1]);
	if (icon_direction=="up")  
	 { $('.pacman').addClass('up');}
	else if (icon_direction=="down")  
	 { $('.pacman').addClass('down'); }
	else if (icon_direction=="left")  
	 { $('.pacman').addClass('left'); }
	else if (icon_direction=="right")  
	 { $('.pacman').addClass('right'); }	
	pacman_timer = setInterval(function(){changePosition();}, speed);
   }
}


function changePosition()
{ 
  	if (movement_direction[0]=="up")
		{ pacman.setLatLng(L.latLng([pacman.getLatLng().lat + 0.00001, pacman.getLatLng().lng])); 
		  if (pacman.getLatLng().lat >= currentSegment[0].lng*beta1+beta0)
		  	{ movement_direction[0]="";  }	
		}
	else if (movement_direction[0]=="down")
		{ pacman.setLatLng(L.latLng([pacman.getLatLng().lat - 0.00001, pacman.getLatLng().lng])); 
		  if (pacman.getLatLng().lat <= currentSegment[0].lng*beta1+beta0)
		  	{ movement_direction[0]="";  }	
		}
	if (movement_direction[1]=="right")
		{ pacman.setLatLng(L.latLng([pacman.getLatLng().lat, pacman.getLatLng().lng+ 0.00001])); 
		  if (pacman.getLatLng().lng >= currentSegment[0].lng)
		  	{ movement_direction[1]="";  }		
		}
	else if (movement_direction[1]=="left")
		{ pacman.setLatLng(L.latLng([pacman.getLatLng().lat, pacman.getLatLng().lng- 0.00001])); 
		  if (pacman.getLatLng().lng <= currentSegment[0].lng)
		  	{ movement_direction[1]="";  }		
		} 
	trail.addLatLng(pacman.getLatLng());
	
	if (movement_direction[0]==movement_direction[1])
	     {
	      currentSegment.splice(0, 1); //I have reached this point, I discard it
	      if (currentSegment.length==0)
			{	
			 stop_walking(); //clear the timer
			 walk();  //pass to the next queued segment
			}
		  else
		  {// next point of the segment
	       movement_direction = getMovementDirection(pacman.getLatLng(), currentSegment[0]);  //[0] can be where I am now  
	      }
	     }

}



function stop_walking()
{
      walking=false;
 clearInterval(pacman_timer);
 if (icon_direction=="up")  
		 {
		  $('.pacman').removeClass('up');
		  $('.pacman').css('background-position', '0px 33px');
		 }
	 else if (icon_direction=="down")  
		 {
		  $('.pacman').removeClass('down');
		  $('.pacman').css('background-position', '0px 95px');
		 }
	 else if (icon_direction=="left")  
		 {
		  $('.pacman').removeClass('left');
		  $('.pacman').css('background-position', '0px 60px');
		 }
	 else if (icon_direction=="right")  
		 {
		  $('.pacman').removeClass('right');
		  $('.pacman').css('background-position', '0px 0px');
		 }	

}



function createLine(starting_point)
{
 trail = L.polyline([starting_point],
                    {
					   color: USER_PATH_COLOR,
					   weight: USER_PATH_WEIGHT,
					   opacity: USER_PATH_OPACITY,
					   clickable: false,
					   smoothFactor:1
					  }
				    );	
 drawnPath.addLayer(trail);
 drawnPath.bringToBack();
}





/** am i moving up,down,left or right? */
function getMainDirection(oldPosition, newPosition)
{
 var diff_lat;
 var diff_lng; 
 var direction;
 if (oldPosition.lat > newPosition.lat*beta1+beta0)
   {diff_lat = oldPosition.lat - newPosition.lat;
	direction = "down";   
   }
 else
   {diff_lat = newPosition.lat - oldPosition.lat;
	direction = "up"; 
   }
   
if (oldPosition.lng > newPosition.lng)
   {diff_lng = oldPosition.lng - newPosition.lng;
	if (diff_lng > diff_lat)
		{direction = "left";}
   }
 else
   {diff_lng = newPosition.lng - oldPosition.lng;
	 if (diff_lng > diff_lat)
		{direction = "right";}   
   } 
 return direction;     
}




/** am i moving up,down,left or right? */
function getMovementDirection(oldPosition, newPosition)
{
 var diff_lat;
 var diff_lng; 
 var direction=[];
 if (oldPosition.lat > newPosition.lng*beta1+beta0)
   {direction.push("down");   }
 else
   { direction.push("up"); }
   
if (oldPosition.lng > newPosition.lng)
   {direction.push("left");}
 else
   {direction.push("right");}   
 return direction;     
}


function linearRegression()
{ 
        // lat=y   lng = x
        // first pass: read in data, compute xbar and ybar
        var sumx = 0.0;
        var sumy = 0.0; 
        var sumx2 = 0.0;
        for ( n=0; n<currentSegment.length; n++)
        {
            sumx  += currentSegment[n].lng;
            sumx2 += currentSegment[n].lng * currentSegment[n].lng;
            sumy  += currentSegment[n].lat;
        }
        var xbar = sumx / currentSegment.length;
        var ybar = sumy / currentSegment.length;

        // second pass: compute summary statistics
        var xxbar = 0.0; 
        var yybar = 0.0;
        var xybar = 0.0;
        for (i = 0; i < currentSegment.length; i++) 
        {
            xxbar += (currentSegment[i].lng - xbar) * (currentSegment[i].lng - xbar);
            yybar += (currentSegment[i].lat - ybar) * (currentSegment[i].lat - ybar);
            xybar += (currentSegment[i].lng - xbar) * (currentSegment[i].lat - ybar);
        }
        beta1 = xybar / xxbar;
        beta0 = ybar - beta1 * xbar;

        // print results
        alert("y   = " + beta1 + " * x + " + beta0);
}
